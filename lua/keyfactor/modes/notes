prompt styles:
    - telescope floating window
    - insert completion
    - hop position labeling
    - confirmation popup
    - text entry (search, command...)
    - invisible (e.g. for char search)
        -- just put something in the status bar..

    These styles should be "emergent":
        - prompts have options/features (as below)
        - additionally there are *layouts*




prompt options:
    - editable prompt buffer vs no editable buffer
    - fixed list of options vs free text
    - multiple results vs single result


    These attributes are all (*) independent. E.g.
        char search prompt is free text with no editable buffer
        regex search prompt is free text with editable prompt buffer
        telescope is fixed list of options with editable prompt buffer
        hop or mnemonic list is fixed list of options with no editable buffer

        (*: We don't currently have a need for free text with multiple results, but not a priori
        any reason it shouldn't be allowed. Multiple result free text with editable buffer could be
        done in telescope-style window; with no editable buffer is somewhat unclear, I guess it
        looks like a sequence of chars of variable length)

prompt attributes:
    - confirm/cancel or accept/reject
    - current contents or selection(s)

prompt features:
    - preview buffer
    - incremental/live entry
        -- search, command
    - for fixed lists of options:
        - mnenomic style selection (hop, confirmation window, etc.)
        - fuzzy selection (telescope style)
        - generally: a mechanism for turning "input" text into restrictions on the options list
        - can hot-switch between these two mechanisms? (e.g. telescope-hop.nvim)






MODEL
basic
    - actions associated with accept and cancel
        - (which might be resuming a coroutine)

text prompt
    - text value

options
    - full list of possibilities
    - selected status
    - available status
    - ranking
    - focus
    
mnemonic options
    - same as options prompt but also associates mnemonic string with each option
    
embedded options
    - associates buffer, range with each option?

CONTROLLER
prompt
    - accept or cancel
    - set associated action

text prompt
    - buffer controller: just exposes text buffer
    - getkey controller: gets chars in a loop and directly sets them

options prompt:
    - basic single result controller: only supports moving focus; "accept" selects the current focus
    - basic multi result controller: supports moving focus, setting selection
    - completion controller: extends single result controller by making only some possibilities
      available, depending on provided string
        - embedded completion controller: gets provided string as contents of extrange in a buffer
    - hop controller: for range options, gets chars in a loop
    - mnemonic prompt: for small lists of fixed possibilities; gets chars in a loop
    - telescope prompts: use combination of text buffer producing fuzzy filter, and options setters

VIEW
basic prompt: (popup) window with message

text prompt: (popup) window with buffer displaying current text value

options prompt:
    - window that displays all possibilities, various layouts:
        - vertical list
        - horizontal list
        - if model is mnemonic options, can display associated mnemonic strings
        - (suitable for basic single, basic multi, and mnemonic prompt)
    - extrange view
        (suitable for embedded options? mostly hop)
        - highlight extranges corresponding to positions; can move between them
        - if also mnemonic then display mnemonics at positions and allow hop
    - completion view
        - optionally display list of options: in window at bottom, or popup at a particular extmark
        - optionally display current focus as virtual text
    - telescope view
        - provided by telescope prompts

previews
    - various versions; can be used simultaneously with any of the other views
    - watches model and previews in whatever way

incremental results
    - also implemented as a view, watching the model, can be used simultaneously with some of the
      above but makes the most sense for text prompts and some basic single option prompts
